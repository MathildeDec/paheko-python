# coding: utf-8

"""
    Paheko API

    Documentation Swagger pour l'API de Paheko  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/paheko-api/paheko-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class UserIDUSERBody1(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      paheko_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    paheko_types = {
        'nom': 'str',
        'prenom': 'str'
    }

    attribute_map = {
        'nom': 'nom',
        'prenom': 'prenom'
    }

    def __init__(self, nom=None, prenom=None):  # noqa: E501
        """UserIDUSERBody1 - a model defined in Swagger"""  # noqa: E501
        self._nom = None
        self._prenom = None
        self.discriminator = None
        if nom is not None:
            self.nom = nom
        if prenom is not None:
            self.prenom = prenom

    @property
    def nom(self):
        """Gets the nom of this UserIDUSERBody1.  # noqa: E501


        :return: The nom of this UserIDUSERBody1.  # noqa: E501
        :rtype: str
        """
        return self._nom

    @nom.setter
    def nom(self, nom):
        """Sets the nom of this UserIDUSERBody1.


        :param nom: The nom of this UserIDUSERBody1.  # noqa: E501
        :type: str
        """

        self._nom = nom

    @property
    def prenom(self):
        """Gets the prenom of this UserIDUSERBody1.  # noqa: E501


        :return: The prenom of this UserIDUSERBody1.  # noqa: E501
        :rtype: str
        """
        return self._prenom

    @prenom.setter
    def prenom(self, prenom):
        """Sets the prenom of this UserIDUSERBody1.


        :param prenom: The prenom of this UserIDUSERBody1.  # noqa: E501
        :type: str
        """

        self._prenom = prenom

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.paheko_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UserIDUSERBody1, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserIDUSERBody1):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
