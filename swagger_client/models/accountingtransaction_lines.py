# coding: utf-8

"""
    Paheko API

    Documentation Swagger pour l'API de Paheko  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AccountingtransactionLines(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account': 'str',
        'id_account': 'int',
        'credit': 'float',
        'debit': 'float',
        'label': 'str',
        'reference': 'str',
        'id_project': 'int'
    }

    attribute_map = {
        'account': 'account',
        'id_account': 'id_account',
        'credit': 'credit',
        'debit': 'debit',
        'label': 'label',
        'reference': 'reference',
        'id_project': 'id_project'
    }

    def __init__(self, account=None, id_account=None, credit=None, debit=None, label=None, reference=None, id_project=None):  # noqa: E501
        """AccountingtransactionLines - a model defined in Swagger"""  # noqa: E501
        self._account = None
        self._id_account = None
        self._credit = None
        self._debit = None
        self._label = None
        self._reference = None
        self._id_project = None
        self.discriminator = None
        if account is not None:
            self.account = account
        if id_account is not None:
            self.id_account = id_account
        if credit is not None:
            self.credit = credit
        if debit is not None:
            self.debit = debit
        if label is not None:
            self.label = label
        if reference is not None:
            self.reference = reference
        if id_project is not None:
            self.id_project = id_project

    @property
    def account(self):
        """Gets the account of this AccountingtransactionLines.  # noqa: E501


        :return: The account of this AccountingtransactionLines.  # noqa: E501
        :rtype: str
        """
        return self._account

    @account.setter
    def account(self, account):
        """Sets the account of this AccountingtransactionLines.


        :param account: The account of this AccountingtransactionLines.  # noqa: E501
        :type: str
        """

        self._account = account

    @property
    def id_account(self):
        """Gets the id_account of this AccountingtransactionLines.  # noqa: E501


        :return: The id_account of this AccountingtransactionLines.  # noqa: E501
        :rtype: int
        """
        return self._id_account

    @id_account.setter
    def id_account(self, id_account):
        """Sets the id_account of this AccountingtransactionLines.


        :param id_account: The id_account of this AccountingtransactionLines.  # noqa: E501
        :type: int
        """

        self._id_account = id_account

    @property
    def credit(self):
        """Gets the credit of this AccountingtransactionLines.  # noqa: E501


        :return: The credit of this AccountingtransactionLines.  # noqa: E501
        :rtype: float
        """
        return self._credit

    @credit.setter
    def credit(self, credit):
        """Sets the credit of this AccountingtransactionLines.


        :param credit: The credit of this AccountingtransactionLines.  # noqa: E501
        :type: float
        """

        self._credit = credit

    @property
    def debit(self):
        """Gets the debit of this AccountingtransactionLines.  # noqa: E501


        :return: The debit of this AccountingtransactionLines.  # noqa: E501
        :rtype: float
        """
        return self._debit

    @debit.setter
    def debit(self, debit):
        """Sets the debit of this AccountingtransactionLines.


        :param debit: The debit of this AccountingtransactionLines.  # noqa: E501
        :type: float
        """

        self._debit = debit

    @property
    def label(self):
        """Gets the label of this AccountingtransactionLines.  # noqa: E501


        :return: The label of this AccountingtransactionLines.  # noqa: E501
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this AccountingtransactionLines.


        :param label: The label of this AccountingtransactionLines.  # noqa: E501
        :type: str
        """

        self._label = label

    @property
    def reference(self):
        """Gets the reference of this AccountingtransactionLines.  # noqa: E501


        :return: The reference of this AccountingtransactionLines.  # noqa: E501
        :rtype: str
        """
        return self._reference

    @reference.setter
    def reference(self, reference):
        """Sets the reference of this AccountingtransactionLines.


        :param reference: The reference of this AccountingtransactionLines.  # noqa: E501
        :type: str
        """

        self._reference = reference

    @property
    def id_project(self):
        """Gets the id_project of this AccountingtransactionLines.  # noqa: E501


        :return: The id_project of this AccountingtransactionLines.  # noqa: E501
        :rtype: int
        """
        return self._id_project

    @id_project.setter
    def id_project(self, id_project):
        """Sets the id_project of this AccountingtransactionLines.


        :param id_project: The id_project of this AccountingtransactionLines.  # noqa: E501
        :type: int
        """

        self._id_project = id_project

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AccountingtransactionLines, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AccountingtransactionLines):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
